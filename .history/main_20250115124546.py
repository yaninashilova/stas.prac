import telebot
from telebot import types
import requests
from telebot import apihelper
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
# apihelper.proxy = {
#     'https': 'socks5://user:password@host:port'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
# }

# –£–≤–µ–ª–∏—á—å—Ç–µ —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
apihelper.READ_TIMEOUT = 30
apihelper.CONNECT_TIMEOUT = 30

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot('YOUR_TELEGRAM_BOT_TOKEN')

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
VIEWED_RECIPES_FILE = "viewed_recipes.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_viewed_recipes():
    if os.path.exists(VIEWED_RECIPES_FILE):
        with open(VIEWED_RECIPES_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —Ñ–∞–π–ª
def save_viewed_recipes():
    with open(VIEWED_RECIPES_FILE, "w", encoding="utf-8") as file:
        json.dump(viewed_recipes, file, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
viewed_recipes = load_viewed_recipes()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data="search"))
    markup.add(types.InlineKeyboardButton("üî• –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", callback_data="random"))
    markup.add(types.InlineKeyboardButton("üìö –†–∞–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ", callback_data="viewed"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = str(call.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON

    if call.data == "search":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, chicken):")
    elif call.data == "random":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
        recipe = get_random_recipe()
        if recipe:
            send_recipe(call.message.chat.id, recipe)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç.")
    elif call.data == "viewed":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        if user_id in viewed_recipes and viewed_recipes[user_id]:
            response = "üìö –†–∞–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n"
            for recipe_id in viewed_recipes[user_id]:
                recipe = get_recipe_by_id(recipe_id)
                if recipe:
                    response += f"üç¥ {recipe['strMeal']}\n"
            bot.send_message(call.message.chat.id, response)
        else:
            bot.send_message(call.message.chat.id, "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã.")
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤)
@bot.message_handler(func=lambda message: True)
def search_recipes(message):
    user_id = str(message.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
    ingredient = message.text.lower()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç

    # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
    recipes = search_recipes_by_ingredient(ingredient)
    if not recipes:
        bot.send_message(message.chat.id, "–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    markup = types.InlineKeyboardMarkup()
    for recipe in recipes:
        markup.add(types.InlineKeyboardButton(recipe["strMeal"], callback_data=f"recipe_{recipe['idMeal']}"))

    bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("recipe_"))
def handle_recipe_callback(call):
    user_id = str(call.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
    recipe_id = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–∞

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    if user_id not in viewed_recipes:
        viewed_recipes[user_id] = []
    if recipe_id not in viewed_recipes[user_id]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        viewed_recipes[user_id].append(recipe_id)
        save_viewed_recipes()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞
    recipe = get_recipe_by_id(recipe_id)
    if recipe:
        send_recipe(call.message.chat.id, recipe)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç.")

    # –£–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
def search_recipes_by_ingredient(ingredient):
    url = f"https://www.themealdb.com/api/json/v1/1/filter.php"
    params = {
        "i": ingredient  # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return data.get("meals", [])
        else:
            return None
    except requests.exceptions.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", e)
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
def get_random_recipe():
    url = "https://www.themealdb.com/api/json/v1/1/random.php"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return data.get("meals", [])[0] if data.get("meals") else None
        else:
            return None
    except requests.exceptions.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", e)
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ ID
def get_recipe_by_id(recipe_id):
    url = f"https://www.themealdb.com/api/json/v1/1/lookup.php"
    params = {
        "i": recipe_id  # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ ID
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return data.get("meals", [])[0] if data.get("meals") else None
        else:
            return None
    except requests.exceptions.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", e)
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞
def send_recipe(chat_id, recipe):
    response = f"üç¥ {recipe['strMeal']}\n\n"
    response += f"üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
    for i in range(1, 21):
        ingredient = recipe.get(f"strIngredient{i}")
        measure = recipe.get(f"strMeasure{i}")
        if ingredient and measure:
            response += f"- {ingredient}: {measure}\n"
    response += f"\nüìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{recipe['strInstructions']}\n"
    response += f"\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {recipe['strSource']}" if recipe.get("strSource") else ""
    bot.send_message(chat_id, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)